create or replace package upriseart3b_pkg 
IS
/* The first eight procedures are the same as in assignment 2, except for the extension (_PP rather than _SP).  See
   the script to create the procedure skeletons in assignment 2 for details on their implementation
*/
procedure CREATE_ARTIST_PP (
 p_artist_id        OUT INTEGER,        -- an output parameter
 p_tax_id           IN VARCHAR,         -- must not be NULL.  Must be UNIQUE.
 p_given_name       IN VARCHAR,
 p_surname          IN VARCHAR,
 p_display_name     IN VARCHAR,         -- If NULL, then use the concatenation ('||') of p_given_name and p_surname
 p_birth_year       IN INTEGER,         -- value must be between 1900 and 2050
 p_photo_url        IN VARCHAR,
 p_biosketch        IN CLOB,
 p_street_1         IN VARCHAR,         -- must not be NULL.
 p_street_2         IN VARCHAR,
 p_city             IN VARCHAR,         -- must not be NULL.
 p_state_province   IN VARCHAR,
 p_postal_code      IN VARCHAR,         -- must not be NULL.
 p_country          IN VARCHAR          -- must not be NULL.
);
procedure CREATE_ARTWORK_PP (
 p_artwork_id       OUT INTEGER,        -- an output parameter.  Value generated by the procedure.
 p_title            IN VARCHAR,         -- must not be NULL
 p_price            IN NUMBER,
 p_size_height      IN DECIMAL,         -- must not be a negative number
 p_size_width       IN DECIMAL,         -- must not be a negative number
 p_size_depth       IN DECIMAL,         -- must not be a negative number
 p_size_category    IN VARCHAR,         -- must be one of {'Large', 'Medium', 'Oversized', 'Small'}
 p_creation_year    IN INTEGER,         -- must be between 2000 and the current year
 p_aquisition_date  IN DATE,            -- must not be NULL.  Must not be in the future.
 p_materials        IN VARCHAR,
 p_framed           IN VARCHAR,
 p_medium_name      IN VARCHAR,         -- must match a value found in the UA_MEDIUM table
 p_photo_url        IN VARCHAR,         -- must not be NULL
 p_quantity_on_hand IN INTEGER,
 p_status           IN VARCHAR,         -- must not be NULL.  Must be one of:  {'For sale', 'Sold out', 'Unavailable'}
 p_artist_id        IN INTEGER          -- must not be NULL.  Must match a value found in the UA_ARTIST table 
);
procedure CREATE_ACCOUNT_PP(
 p_account_id       OUT INTEGER,            -- an output parameter.  Value generated by the procedure.
 p_first_name       IN VARCHAR,             -- must not be NULL
 p_last_name        IN VARCHAR,             -- must not be NULL
 p_email            IN VARCHAR,             -- must not be NULL.   Must be unique.
 p_password         IN VARCHAR,             -- must not be NULL
 p_occupation       IN VARCHAR,
 p_website          IN VARCHAR,
 p_referred_by      IN VARCHAR,
 p_artwork_loved    IN VARCHAR
);
procedure ADD_ADDRESS_PP (
 p_address_id       OUT INTEGER,            -- an output parameter.  Value generated by the procedure.
 p_first_name       IN VARCHAR,
 p_last_name        IN VARCHAR,
 p_line_1           IN VARCHAR,
 p_line_2           IN VARCHAR,
 p_city             IN VARCHAR,
 p_state_province   IN VARCHAR,
 p_postal_code      IN VARCHAR,
 p_country          IN VARCHAR,
 p_phone            IN VARCHAR,
 p_account_ID       IN INTEGER              -- must not be NULL
 );
procedure CREATE_COLLECTION_PP (
 p_collection_id    OUT INTEGER,            -- an output parameter.  Value generated by the procedure.
 p_name             IN VARCHAR,             -- must not be NULL.  Must be UNIQUE
 p_description      IN CLOB,
 p_create_date      IN DATE                 -- Must not come later than current date
);
procedure ADD_ART_COLLECTION_PP (
 p_collection_id    IN INTEGER,             -- must not be NULL.
 p_artwork_id       IN INTEGER              -- must not be NULL.
);
 procedure REMOVE_ART_COLLECTION_PP (
 p_collection_id IN INTEGER,             -- must not be NULL.
 p_artwork_id    IN INTEGER              -- must not be NULL.
);
procedure ADD_INTEREST_PP (
 p_artwork_id       IN INTEGER,             -- must not be NULL.
 p_account_id       IN INTEGER,             -- must not be NULL.
 p_name             IN VARCHAR,
 p_email            IN VARCHAR
);
/*   NEW PROCEDURES IN ASSIGNMENT 3B
*/
/*
ADD_TO_CART_PP:  Add a work of art to the given account’s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  If the quantity on hand of the work of art is 0, or the status is not ‘For sale’, 
   display a message a message that the work of art is not available.  If the quantity on hand is greater than zero 
   and the status is ‘For sale’, then decrease the quantity on hand by 1.  If the new quantity on hand is 0, then 
   change the status to ‘Sold out’.
RETURNS:  No values returned
ERROR MESSAGES:

    Error text:  "Work of art (x) is not available. No artwork added to cart."
    Error meaning:  The quantity on hand of the work of art is 0, or the status is 'Sold out' or 'Unavailable'.  
                Here x = the value of p_artwork_id.
    Error effect:  No data are inserted into the shopping cart.  

    Error text:  "Missing mandatory value for parameter (x) in ADD_TO_CART_PP. No artwork added to cart."
    Error meaning:  A mandatory value is missing.  Here x = the name of the parameter whose value is missing.
    Error effect:  Because a mandatory value is not provided, no data are inserted into the shopping cart.  
       
    Error text: "Work of art (x) not found."
    Error meaning:  The artwork_id value does not match any artwork in the UA_ARTWORK table.  Here x = the value of p_artwork_id.
    Error effect:  No insertion made to the shopping cart.
       
    Error text:  "Account (x) not found."
    Error meaning:  The account_id value does not match an account in the UA_ACCOUNT table.  Here x = the value of p_account_id.
    Error effect:  No insertion made to the shopping cart.
*/
procedure ADD_TO_CART_PP (
 p_artwork_id       IN INTEGER,     --NOT NULL
 p_account_id       IN INTEGER      --NOT NULL
);
/*
REMOVE_FROM_CART_PP:  Remove a work of art from the given account’s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  Remove a work of art from the current user’s shopping cart.  Increase the quantity on hand by 1.  If the 
original status is ‘Sold out’, then change it to ‘For sale’.  
RETURNS:  No values returned
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (x) in REMOVE_FROM_CART_PP."
    Error meaning:  A mandatory value is missing.  Here x = the name of the parameter whose value is missing.
    Error effect:  Because a mandatory value is not provided, no change is made to the shopping cart.  
       
    Error text: "Work of art (x) not found."
    Error meaning:  The artwork_id value does not match any artwork in the UA_ARTWORK table.  Here x = the value of p_artwork_id.
    Error effect:  No change made to the shopping cart.
       
    Error text:  "Account (x) not found."
    Error meaning:  The account_id value does not match an account in the UA_ACCOUNT table.  Here x = the value of p_account_id.
    Error effect:  No change made to the shopping cart.
*/
procedure REMOVE_FROM_CART_PP (
 p_artwork_id       IN INTEGER,     --NOT NULL
 p_account_id       IN INTEGER      --NOT NULL
);
/*
VIEW_CART_PP:  Remove a work of art from the given account’s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  List the current contents of the shopping cart for the given account.  This should include the name of the 
work, the name of the artist, the price of the work.  After listing each of the works in the cart, the procedure 
should list the total for the entire order.
RETURNS:  No values returned
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (account_id) in REMOVE_FROM_CART_PP."
    Error meaning:  self-explanatory.
    Error effect:  Because a mandatory value is not provided, shopping cart content is displayed.  
    
*/
procedure VIEW_CART_PP(
 p_account_id       IN INTEGER      --NOT NULL
);
/*
CHECKOUT_PP:  Remove a work of art from the given account’s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  Given the needed billing information, the procedure creates a transaction and adds it to the 
UA_ORDER_TRANSACTION and UA_ORDER_DETAIL tables.  It generates an order_id value, uses the CURRENT_DATE for the date 
value, stores the sum of all of the prices of items in the shopping cart as the subtotal, calculates and stores a 7% 
sales tax, and adds the subtotal and sales tax together to produce the order total, which also is stored.
RETURNS:  The order_id of the transaction.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (x) in CHECKOUT_PP."
    Error meaning:  A mandatory value is missing.  Here x = the name of the parameter whose value is missing.
    Error effect:  Because a mandatory value is not provided, no transaction is created.  
       
    Error text: "No items in the shopping cart for account (x)."
    Error meaning:  Either the account_id value is not valid, or there are no items in the shopping cart for this account.  
                    Here x = the value of p_account_id.
    Error effect:  No change made to the shopping cart.  No transaction is created and p_order_id returned in NULL.
       
    Error text:  "Shipping address (x) is not valid."
    Error meaning:  The p_shipping_address value does not match an address in the UA_ADDRESS table.  Here x = the value of p_shipping_address.
    Error effect:  No change made to the shopping cart.
    
    Error text:  "Billing address (x) is not valid."
    Error meaning:  The p_billing_address value does not match an address in the UA_ADDRESS table.  Here x = the value of p_billing_address.
    Error effect:  No change made to the shopping cart.

    Error text:  "Invalid billing type (x)."
    Error meaning:  The p_billing_type value is not one of:  'Bank Wire', 'Check' or 'Credit Card'.  Here x = the value of p_billing_type.
    Error effect:  No change made to the shopping cart.

    Error text:  "Invalid billing type (x)."
    Error meaning:  The p_billing_type value is not one of:  'Bank Wire', 'Check' or 'Credit Card'.  Here x = the value of p_billing_type.
    Error effect:  No change made to the shopping cart.

*/
procedure CHECKOUT_PP(
 p_account_id       IN INTEGER,         --NOT NULL
 p_special_instructions IN VARCHAR,
 p_billing_type     IN VARCHAR,         
 p_payment_status   IN VARCHAR,         
 p_shipping_address IN INTEGER,         
 p_billing_address  IN INTEGER,         --NOT NULL
 p_order_id        OUT INTEGER
);
/*
CALC_TOTAL_SALES_PP:  Given an artist id, a start date and an end date, this function calculates the total amount of art sold 
(the sum of the prices of each work of art sold by this artist) by that artist during the indicated time period.  
EXPECTED BEHAVIOR:  Return the sum of all work of art prices for works of art sold by the artist within the given time
period, as indicated by the order date of the transactions.  If no end date is provided, then the end date is the 
current date.  If no start date is provided, then any sale before the end date is included.  If both dates are NULL, 
then all sales are included.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (account id) in CALC_TOTAL_SALES_PP."
    Error meaning:  A mandatory value is missing.  
    Error effect:  Because a mandatory value is not provided, no calculation is performed.  The value returned is NULL.
       
    Error text: "The end date (x) must be later than the start date (y)."
    Error meaning:  The start date and end date must be ordered chronologically.  Here x = the value of p_end_date and y = the
                value of p_start_date.
    Error effect:  No calculation is performed.  The value returned is NULL.
*/
function CALC_TOTAL_SALES_PF (
 p_artist_id        IN INTEGER,
 p_start_date       IN DATE,
 p_end_date         IN DATE
) RETURN INTEGER;

/*
CALC_TOTAL_SALES_PP:  Given an artist id, this function calculates the total amount of art sold 
(the sum of the prices of each work of art sold by this artist) by that artist.  
EXPECTED BEHAVIOR:  Return the sum of all work of art prices for works of art sold by the artist.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (account id) in CALC_TOTAL_SALES_PP."
    Error meaning:  A mandatory value is missing.  
    Error effect:  Because a mandatory value is not provided, no calculation is performed.  The value returned is NULL.
*/
function CALC_TOTAL_SALES_PF(
 p_artist_id        IN INTEGER
) RETURN INTEGER;

/*
REPORT_SALES_PP:  Given a start and an end date, this procedure should list each artist who sold a work of art during that time 
period and list this artist’s name together with that artist’s total sales during the period.  
EXPECTED BEHAVIOR:  For each artist who sold a work of art in the given time period, this procedure should call 
CALC_TOTAL_SALES_PF to determine the total sales. If no end date is provided, then the end date is the 
current date.  If no start date is provided, then any sale before the end date is included.  If both dates are NULL, 
then all sales are included.
ERROR MESSAGES:
    Error text: "The end date (x) must be later than the start date (y)."
    Error meaning:  The start date and end date must be ordered chronologically.  Here x = the value of p_end_date and y = the
                value of p_start_date.
    Error effect:  No calculation is performed.  The value returned is NULL.
*/
procedure REPORT_SALES_PP(
 p_start_date       IN DATE,
 p_end_date         IN DATE
);
end upriseart3b_pkg;
/