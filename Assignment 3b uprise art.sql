CREATE OR REPLACE PACKAGE upriseart3b_pkg IS
/* The first eight procedures are the same as in assignment 2, except for the extension (_PP rather than _SP).  See
   the script to create the procedure skeletons in assignment 2 for details on their implementation
*/
    PROCEDURE create_artist_pp (
        p_artist_id       OUT  INTEGER,        -- an output parameter
        p_tax_id          IN   VARCHAR,         -- must not be NULL.  Must be UNIQUE.
        p_given_name      IN   VARCHAR,
        p_surname         IN   VARCHAR,
        p_display_name    IN   VARCHAR,         -- If NULL, then use the concatenation ('||') of p_given_name and p_surname
        p_birth_year      IN   INTEGER,         -- value must be between 1900 and 2050
        p_photo_url       IN   VARCHAR,
        p_biosketch       IN   CLOB,
        p_street_1        IN   VARCHAR,         -- must not be NULL.
        p_street_2        IN   VARCHAR,
        p_city            IN   VARCHAR,         -- must not be NULL.
        p_state_province  IN   VARCHAR,
        p_postal_code     IN   VARCHAR,         -- must not be NULL.
        p_country         IN   VARCHAR          -- must not be NULL.
    );

    PROCEDURE create_artwork_pp (
        p_artwork_id        OUT  INTEGER,        -- an output parameter.  Value generated by the procedure.
        p_title             IN   VARCHAR,         -- must not be NULL
        p_price             IN   NUMBER,
        p_size_height       IN   DECIMAL,         -- must not be a negative number
        p_size_width        IN   DECIMAL,         -- must not be a negative number
        p_size_depth        IN   DECIMAL,         -- must not be a negative number
        p_size_category     IN   VARCHAR,         -- must be one of {'Large', 'Medium', 'Oversized', 'Small'}
        p_creation_year     IN   INTEGER,         -- must be between 2000 and the current year
        p_aquisition_date   IN   DATE,            -- must not be NULL.  Must not be in the future.
        p_materials         IN   VARCHAR,
        p_framed            IN   VARCHAR,
        p_medium_name       IN   VARCHAR,         -- must match a value found in the UA_MEDIUM table
        p_photo_url         IN   VARCHAR,         -- must not be NULL
        p_quantity_on_hand  IN   INTEGER,
        p_status            IN   VARCHAR,         -- must not be NULL.  Must be one of:  {'For sale', 'Sold out', 'Unavailable'}
        p_artist_id         IN   INTEGER          -- must not be NULL.  Must match a value found in the UA_ARTIST table 
    );

    PROCEDURE create_account_pp (
        p_account_id     OUT  INTEGER,            -- an output parameter.  Value generated by the procedure.
        p_first_name     IN   VARCHAR,             -- must not be NULL
        p_last_name      IN   VARCHAR,             -- must not be NULL
        p_email          IN   VARCHAR,             -- must not be NULL.   Must be unique.
        p_password       IN   VARCHAR,             -- must not be NULL
        p_occupation     IN   VARCHAR,
        p_website        IN   VARCHAR,
        p_referred_by    IN   VARCHAR,
        p_artwork_loved  IN   VARCHAR
    );

    PROCEDURE add_address_pp (
        p_address_id      OUT  INTEGER,            -- an output parameter.  Value generated by the procedure.
        p_first_name      IN   VARCHAR,
        p_last_name       IN   VARCHAR,
        p_line_1          IN   VARCHAR,
        p_line_2          IN   VARCHAR,
        p_city            IN   VARCHAR,
        p_state_province  IN   VARCHAR,
        p_postal_code     IN   VARCHAR,
        p_country         IN   VARCHAR,
        p_phone           IN   VARCHAR,
        p_account_id      IN   INTEGER              -- must not be NULL
    );

    PROCEDURE create_collection_pp (
        p_collection_id  OUT  INTEGER,            -- an output parameter.  Value generated by the procedure.
        p_name           IN   VARCHAR,             -- must not be NULL.  Must be UNIQUE
        p_description    IN   CLOB,
        p_create_date    IN   DATE                 -- Must not come later than current date
    );

    PROCEDURE add_art_collection_pp (
        p_collection_id  IN  INTEGER,             -- must not be NULL.
        p_artwork_id     IN  INTEGER              -- must not be NULL.
    );

    PROCEDURE remove_art_collection_pp (
        p_collection_id  IN  INTEGER,             -- must not be NULL.
        p_artwork_id     IN  INTEGER              -- must not be NULL.
    );

    PROCEDURE add_interest_pp (
        p_artwork_id  IN  INTEGER,             -- must not be NULL.
        p_account_id  IN  INTEGER,             -- must not be NULL.
        p_name        IN  VARCHAR,
        p_email       IN  VARCHAR
    );
/*   NEW PROCEDURES IN ASSIGNMENT 3B
*/
/*
ADD_TO_CART_PP:  Add a work of art to the given account�s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  If the quantity on hand of the work of art is 0, or the status is not �For sale�, 
   display a message a message that the work of art is not available.  If the quantity on hand is greater than zero 
   and the status is �For sale�, then decrease the quantity on hand by 1.  If the new quantity on hand is 0, then 
   change the status to �Sold out�.
RETURNS:  No values returned
ERROR MESSAGES:

    Error text:  "Work of art (x) is not available. No artwork added to cart."
    Error meaning:  The quantity on hand of the work of art is 0, or the status is 'Sold out' or 'Unavailable'.  
                Here x = the value of p_artwork_id.
    Error effect:  No data are inserted into the shopping cart.  

    Error text:  "Missing mandatory value for parameter (x) in ADD_TO_CART_PP. No artwork added to cart."
    Error meaning:  A mandatory value is missing.  Here x = the name of the parameter whose value is missing.
    Error effect:  Because a mandatory value is not provided, no data are inserted into the shopping cart.  
       
    Error text: "Work of art (x) not found."
    Error meaning:  The artwork_id value does not match any artwork in the UA_ARTWORK table.  Here x = the value of p_artwork_id.
    Error effect:  No insertion made to the shopping cart.
       
    Error text:  "Account (x) not found."
    Error meaning:  The account_id value does not match an account in the UA_ACCOUNT table.  Here x = the value of p_account_id.
    Error effect:  No insertion made to the shopping cart.
*/

    PROCEDURE add_to_cart_pp (
        p_artwork_id  IN  INTEGER,     --NOT NULL
        p_account_id  IN  INTEGER      --NOT NULL
    );
/*
REMOVE_FROM_CART_PP:  Remove a work of art from the given account�s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  Remove a work of art from the current user�s shopping cart.  Increase the quantity on hand by 1.  If the 
original status is �Sold out�, then change it to �For sale�.  
RETURNS:  No values returned
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (x) in REMOVE_FROM_CART_PP."
    Error meaning:  A mandatory value is missing.  Here x = the name of the parameter whose value is missing.
    Error effect:  Because a mandatory value is not provided, no change is made to the shopping cart.  
       
    Error text: "Work of art (x) not found."
    Error meaning:  The artwork_id value does not match any artwork in the UA_ARTWORK table.  Here x = the value of p_artwork_id.
    Error effect:  No change made to the shopping cart.
       
    Error text:  "Account (x) not found."
    Error meaning:  The account_id value does not match an account in the UA_ACCOUNT table.  Here x = the value of p_account_id.
    Error effect:  No change made to the shopping cart.
*/

    PROCEDURE remove_from_cart_pp (
        p_artwork_id  IN  INTEGER,     --NOT NULL
        p_account_id  IN  INTEGER      --NOT NULL
    );
/*
VIEW_CART_PP:  Remove a work of art from the given account�s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  List the current contents of the shopping cart for the given account.  This should include the name of the 
work, the name of the artist, the price of the work.  After listing each of the works in the cart, the procedure 
should list the total for the entire order.
RETURNS:  No values returned
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (account_id) in REMOVE_FROM_CART_PP."
    Error meaning:  self-explanatory.
    Error effect:  Because a mandatory value is not provided, shopping cart content is displayed.  
    
*/

    PROCEDURE view_cart_pp (
        p_account_id IN INTEGER      --NOT NULL
    );
/*
CHECKOUT_PP:  Remove a work of art from the given account�s shopping cart and update the quantity on hand and status accordingly.
EXPECTED BEHAVIOR.  Given the needed billing information, the procedure creates a transaction and adds it to the 
UA_ORDER_TRANSACTION and UA_ORDER_DETAIL tables.  It generates an order_id value, uses the CURRENT_DATE for the date 
value, stores the sum of all of the prices of items in the shopping cart as the subtotal, calculates and stores a 7% 
sales tax, and adds the subtotal and sales tax together to produce the order total, which also is stored.
RETURNS:  The order_id of the transaction.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (x) in CHECKOUT_PP."
    Error meaning:  A mandatory value is missing.  Here x = the name of the parameter whose value is missing.
    Error effect:  Because a mandatory value is not provided, no transaction is created.  
       
    Error text: "No items in the shopping cart for account (x)."
    Error meaning:  Either the account_id value is not valid, or there are no items in the shopping cart for this account.  
                    Here x = the value of p_account_id.
    Error effect:  No change made to the shopping cart.  No transaction is created and p_order_id returned in NULL.
       
    Error text:  "Shipping address (x) is not valid."
    Error meaning:  The p_shipping_address value does not match an address in the UA_ADDRESS table.  Here x = the value of p_shipping_address.
    Error effect:  No change made to the shopping cart.
    
    Error text:  "Billing address (x) is not valid."
    Error meaning:  The p_billing_address value does not match an address in the UA_ADDRESS table.  Here x = the value of p_billing_address.
    Error effect:  No change made to the shopping cart.

    Error text:  "Invalid billing type (x)."
    Error meaning:  The p_billing_type value is not one of:  'Bank Wire', 'Check' or 'Credit Card'.  Here x = the value of p_billing_type.
    Error effect:  No change made to the shopping cart.

    Error text:  "Invalid billing type (x)."
    Error meaning:  The p_billing_type value is not one of:  'Bank Wire', 'Check' or 'Credit Card'.  Here x = the value of p_billing_type.
    Error effect:  No change made to the shopping cart.

*/

    PROCEDURE checkout_pp (
        p_account_id            IN   INTEGER,         --NOT NULL
        p_special_instructions  IN   VARCHAR,
        p_billing_type          IN   VARCHAR,
        p_payment_status        IN   VARCHAR,
        p_shipping_address      IN   INTEGER,
        p_billing_address       IN   INTEGER,         --NOT NULL
        p_order_id              OUT  INTEGER
    );
/*
CALC_TOTAL_SALES_PP:  Given an artist id, a start date and an end date, this function calculates the total amount of art sold 
(the sum of the prices of each work of art sold by this artist) by that artist during the indicated time period.  
EXPECTED BEHAVIOR:  Return the sum of all work of art prices for works of art sold by the artist within the given time
period, as indicated by the order date of the transactions.  If no end date is provided, then the end date is the 
current date.  If no start date is provided, then any sale before the end date is included.  If both dates are NULL, 
then all sales are included.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (account id) in CALC_TOTAL_SALES_PP."
    Error meaning:  A mandatory value is missing.  
    Error effect:  Because a mandatory value is not provided, no calculation is performed.  The value returned is NULL.
       
    Error text: "The end date (x) must be later than the start date (y)."
    Error meaning:  The start date and end date must be ordered chronologically.  Here x = the value of p_end_date and y = the
                value of p_start_date.
    Error effect:  No calculation is performed.  The value returned is NULL.
*/

    FUNCTION calc_total_sales_pf (
        p_artist_id   IN  INTEGER,
        p_start_date  IN  DATE,
        p_end_date    IN  DATE
    ) RETURN INTEGER;

/*
CALC_TOTAL_SALES_PP:  Given an artist id, this function calculates the total amount of art sold 
(the sum of the prices of each work of art sold by this artist) by that artist.  
EXPECTED BEHAVIOR:  Return the sum of all work of art prices for works of art sold by the artist.
ERROR MESSAGES:
    Error text:  "Missing mandatory value for parameter (account id) in CALC_TOTAL_SALES_PP."
    Error meaning:  A mandatory value is missing.  
    Error effect:  Because a mandatory value is not provided, no calculation is performed.  The value returned is NULL.
*/

    FUNCTION calc_total_sales_pf (
        p_artist_id IN INTEGER
    ) RETURN INTEGER;

/*
REPORT_SALES_PP:  Given a start and an end date, this procedure should list each artist who sold a work of art during that time 
period and list this artist�s name together with that artist�s total sales during the period.  
EXPECTED BEHAVIOR:  For each artist who sold a work of art in the given time period, this procedure should call 
CALC_TOTAL_SALES_PF to determine the total sales. If no end date is provided, then the end date is the 
current date.  If no start date is provided, then any sale before the end date is included.  If both dates are NULL, 
then all sales are included.
ERROR MESSAGES:
    Error text: "The end date (x) must be later than the start date (y)."
    Error meaning:  The start date and end date must be ordered chronologically.  Here x = the value of p_end_date and y = the
                value of p_start_date.
    Error effect:  No calculation is performed.  The value returned is NULL.
*/

    PROCEDURE report_sales_pp (
        p_start_date  IN  DATE,
        p_end_date    IN  DATE
    );

END upriseart3b_pkg;
/

CREATE OR REPLACE PACKAGE BODY upriseart3b_pkg IS

    PROCEDURE create_artist_pp (
        p_artist_id       OUT  INTEGER,        -- an output parameter
        p_tax_id          IN   VARCHAR,         -- must not be NULL.  Must be UNIQUE.
        p_given_name      IN   VARCHAR,
        p_surname         IN   VARCHAR,
        p_display_name    IN   VARCHAR,         -- If NULL, then use the concatenation ('||') of p_given_name and p_surname
        p_birth_year      IN   INTEGER,         -- value must be between 1900 and 2050
        p_photo_url       IN   VARCHAR,
        p_biosketch       IN   CLOB,
        p_street_1        IN   VARCHAR,         -- must not be NULL.
        p_street_2        IN   VARCHAR,
        p_city            IN   VARCHAR,         -- must not be NULL.
        p_state_province  IN   VARCHAR,
        p_postal_code     IN   VARCHAR,         -- must not be NULL.
        p_country         IN   VARCHAR          -- must not be NULL.
    ) IS

        l_error         VARCHAR(20);
        l_display_name  ua_artist.artist_display_name%TYPE;
        l_exst          NUMBER(1);
        ex_null_value EXCEPTION;
        ex_invalid_date EXCEPTION;
        ex_invalid_uk EXCEPTION;
    BEGIN
        l_display_name := p_display_name;
        IF p_tax_id IS NULL THEN
            l_error := 'p_tax_id';
            RAISE ex_null_value;
        ELSIF p_street_1 IS NULL THEN
            l_error := 'p_street_1';
            RAISE ex_null_value;
        ELSIF p_city IS NULL THEN
            l_error := 'p_city';
            RAISE ex_null_value;
        ELSIF p_postal_code IS NULL THEN
            l_error := 'p_postal_code';
            RAISE ex_null_value;
        ELSIF p_country IS NULL THEN
            l_error := 'p_postal_code';
            RAISE ex_null_value;
        ELSIF ( p_birth_year < 1900 OR p_birth_year > 2050 ) THEN
            l_error := p_birth_year;
            RAISE ex_invalid_date;
        ELSIF l_display_name IS NULL THEN
            l_display_name := p_given_name || p_surname;
            IF l_display_name IS NULL THEN
                l_error := 'p_display_name';
                RAISE ex_null_value;
            END IF;
        END IF;

        SELECT
            COUNT(*)
        INTO l_exst
        FROM
            ua_artist
        WHERE
            artist_tax_id = p_tax_id;

        IF l_exst != 0 THEN
            l_error := p_tax_id;
            RAISE ex_invalid_uk;
        END IF;
        p_artist_id := artist_seq.nextval;
        INSERT INTO ua_artist (
            artist_id,
            artist_tax_id,
            artist_given_name,
            artist_surname,
            artist_display_name,
            artist_birth_year,
            artist_photo_url,
            artist_biosketch,
            artist_street_1,
            artist_street_2,
            artist_city,
            artist_state_province,
            artist_postal_code,
            artist_country
        ) VALUES (
            p_artist_id,
            p_tax_id,
            p_given_name,
            p_surname,
            l_display_name,
            p_birth_year,
            p_photo_url,
            p_biosketch,
            p_street_1,
            p_street_2,
            p_city,
            p_state_province,
            p_postal_code,
            p_country
        );

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in CREATE_ARTIST_PP.  No artist added.');
            ROLLBACK;
        WHEN ex_invalid_date THEN
            dbms_output.put_line('Invalid value '
                                 || l_error
                                 || ' for birth year in CREATE_ARTIST_PP.');
            ROLLBACK;
        WHEN ex_invalid_uk THEN
            dbms_output.put_line('Tax ID '
                                 || l_error
                                 || ' is already used.');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END create_artist_pp;

    PROCEDURE create_artwork_pp (
        p_artwork_id        OUT  INTEGER,        -- an output parameter.  Value generated by the procedure.
        p_title             IN   VARCHAR,         -- must not be NULL
        p_price             IN   NUMBER,
        p_size_height       IN   DECIMAL,         -- must not be a negative number
        p_size_width        IN   DECIMAL,         -- must not be a negative number
        p_size_depth        IN   DECIMAL,         -- must not be a negative number
        p_size_category     IN   VARCHAR,         -- must be one of {'Large', 'Medium', 'Oversized', 'Small'}
        p_creation_year     IN   INTEGER,         -- must be between 2000 and the current year
        p_aquisition_date   IN   DATE,            -- must not be NULL.  Must not be in the future.
        p_materials         IN   VARCHAR,
        p_framed            IN   VARCHAR,
        p_medium_name       IN   VARCHAR,         -- must match a value found in the UA_MEDIUM table
        p_photo_url         IN   VARCHAR,         -- must not be NULL
        p_quantity_on_hand  IN   INTEGER,
        p_status            IN   VARCHAR,         -- must not be NULL.  Must be one of:  {'For sale', 'Sold out', 'Unavailable'}
        p_artist_id         IN   INTEGER          -- must not be NULL.  Must match a value found in the UA_ARTIST table 
    ) IS

        l_error  VARCHAR(200);
        l_rows   NUMBER(1);
        ex_null_value EXCEPTION;
        ex_negative_num EXCEPTION;
        ex_invalid_size EXCEPTION;
        ex_invalid_creation_year EXCEPTION;
        ex_date_not_in_past EXCEPTION;
        ex_no_matching_medium EXCEPTION;
        ex_no_matching_artist EXCEPTION;
        ex_invalid_status EXCEPTION;
        check_constraint_violated EXCEPTION;
    BEGIN
    -- Exception handling:
    -- Ex1: Input parameter checks: not null
        IF p_title IS NULL THEN
            l_error := 'p_title';
            RAISE ex_null_value;
        ELSIF p_aquisition_date IS NULL THEN
            l_error := 'p_aquisition_date';
            RAISE ex_null_value;
        ELSIF p_photo_url IS NULL THEN
            l_error := 'p_photo_url';
            RAISE ex_null_value;
        ELSIF p_status IS NULL THEN
            l_error := 'p_status';
            RAISE ex_null_value;
        ELSIF p_artist_id IS NULL THEN
            l_error := 'p_artist_id';
            RAISE ex_null_value;
        END IF;
    
    -- Ex2: Artist check

        SELECT
            COUNT(*)
        INTO l_rows
        FROM
            ua_artist
        WHERE
            artist_id = p_artist_id;

        IF l_rows != 1 THEN
            l_error := p_artist_id;
            RAISE ex_no_matching_artist;
        END IF;
    
    -- Ex3: Medium
        SELECT
            COUNT(*)
        INTO l_rows
        FROM
            ua_medium
        WHERE
            medium_name = p_medium_name;

        IF l_rows != 1 THEN
            l_error := p_medium_name;
            RAISE ex_no_matching_medium;
        END IF;
    
    -- Ex4: current_date year >= creation year >= 2000
        IF (
            p_creation_year <= 2000 AND p_creation_year <= extract(YEAR FROM current_date())
        ) THEN
            RAISE ex_invalid_creation_year;
        END IF;
    
    -- Ex5: acquisition date is not in past

        IF ( p_aquisition_date > current_date() ) THEN
            RAISE ex_date_not_in_past;
        END IF;
    
    -- Ex6: negative numbers
        IF (
            p_size_height IS NOT NULL AND p_size_height < 0
        ) OR (
            p_size_width IS NOT NULL AND p_size_width < 0
        ) OR (
            p_size_depth IS NOT NULL AND p_size_depth < 0
        ) THEN
            RAISE ex_negative_num;
        END IF;
    
    -- Ex7: size category validation

        IF p_size_category NOT IN (
            'Large',
            'Medium',
            'Oversized',
            'Small'
        ) THEN
            RAISE ex_invalid_size;
        END IF;
    
    -- Ex8: artwork status validation

        IF p_status NOT IN (
            'For sale',
            'Sold out',
            'Unavailable'
        ) THEN
            RAISE ex_invalid_status;
        END IF;
        p_artwork_id := artwork_seq.nextval;
        INSERT INTO ua_artwork (
            artwork_id,
            artwork_title,
            artwork_price,
            artwork_size_height,
            artwork_size_width,
            artwork_size_depth,
            artwork_size_category,
            artwork_creation_year,
            artwork_acquisition_date,
            artwork_materials,
            artwork_framed,
            medium_name,
            artwork_photo_url,
            artwork_quantity_on_hand,
            artwork_status,
            artist_id
        ) VALUES (
            p_artwork_id,
            p_title,
            p_price,
            p_size_height,
            p_size_width,
            p_size_depth,
            p_size_category,
            p_creation_year,
            p_aquisition_date,
            p_materials,
            p_framed,
            p_medium_name,
            p_photo_url,
            p_quantity_on_hand,
            p_status,
            p_artist_id
        );

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in CREATE_ACCOUNT_PP. No account added.');
            ROLLBACK;
        WHEN ex_no_matching_artist THEN
            dbms_output.put_line('Invalid artist ('
                                 || l_error
                                 || ') in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN ex_no_matching_medium THEN
            dbms_output.put_line('Invalid medium ('
                                 || l_error
                                 || ') in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN ex_invalid_creation_year THEN
            dbms_output.put_line('Invalid creation year ('
                                 || p_creation_year
                                 || ') in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN ex_date_not_in_past THEN
            dbms_output.put_line('Invalid acquisition date ('
                                 || p_aquisition_date
                                 || ') in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN ex_negative_num THEN
            dbms_output.put_line('All size parameters must be 0 or greater (or null) in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN ex_invalid_size THEN
            dbms_output.put_line('Invalid artwork size category ('
                                 || p_size_category
                                 || ') in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN ex_invalid_status THEN
            dbms_output.put_line('Invalid artwork status ('
                                 || p_status
                                 || ') in CREATE_ARTWORK_PP.');
            ROLLBACK;
        WHEN check_constraint_violated THEN
            dbms_output.put_line('INSERT failed due to check constraint violation');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END create_artwork_pp;

    PROCEDURE create_account_pp (
        p_account_id     OUT  INTEGER,            -- an output parameter.  Value generated by the procedure.
        p_first_name     IN   VARCHAR,             -- must not be NULL
        p_last_name      IN   VARCHAR,             -- must not be NULL
        p_email          IN   VARCHAR,             -- must not be NULL.   Must be unique.
        p_password       IN   VARCHAR,             -- must not be NULL
        p_occupation     IN   VARCHAR,
        p_website        IN   VARCHAR,
        p_referred_by    IN   VARCHAR,
        p_artwork_loved  IN   VARCHAR
    ) IS
        l_error  VARCHAR(20);
        l_rows   NUMBER(1);
        ex_null_value EXCEPTION;
        ex_not_unique EXCEPTION;
    BEGIN
    -- Input parameter checks:
        IF p_first_name IS NULL THEN
            l_error := 'p_first_name';
            RAISE ex_null_value;
        ELSIF p_last_name IS NULL THEN
            l_error := 'p_last_name';
            RAISE ex_null_value;
        ELSIF p_email IS NULL THEN
            l_error := 'p_email';
            RAISE ex_null_value;
        ELSIF p_password IS NULL THEN
            l_error := 'p_password';
            RAISE ex_null_value;
        END IF;
    
    
    --Check if email is unique

        SELECT
            COUNT(*)
        INTO l_rows
        FROM
            ua_account
        WHERE
            account_email = p_email;

        IF l_rows != 0 THEN
            l_error := p_email;
            RAISE ex_not_unique;
            p_account_id := NULL;
        ELSE
        -- Get next index in the sequence and 
            p_account_id := account_seq.nextval;
        END IF;
    
    
    
    --Insert

        INSERT INTO ua_account (
            account_id,
            account_first_name,
            account_last_name,
            account_email,
            account_password,
            account_occupation,
            account_website,
            account_referred_by,
            account_artwork_loved
        ) VALUES (
            p_account_id,
            p_first_name,
            p_last_name,
            p_email,
            p_password,
            p_occupation,
            p_website,
            p_referred_by,
            p_artwork_loved
        );

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in CREATE_ACCOUNT_PP. No account added.');
            ROLLBACK;
        WHEN ex_not_unique THEN
            dbms_output.put_line('Email '
                                 || l_error
                                 || ' is already used ');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END create_account_pp;

    PROCEDURE add_address_pp (
        p_address_id      OUT  INTEGER,            -- an output parameter.  Value generated by the procedure.
        p_first_name      IN   VARCHAR,
        p_last_name       IN   VARCHAR,
        p_line_1          IN   VARCHAR,
        p_line_2          IN   VARCHAR,
        p_city            IN   VARCHAR,
        p_state_province  IN   VARCHAR,
        p_postal_code     IN   VARCHAR,
        p_country         IN   VARCHAR,
        p_phone           IN   VARCHAR,
        p_account_id      IN   INTEGER              -- must not be NULL
    ) IS

        l_error           VARCHAR(20);
        l_account_exists  NUMBER(1);
        l_new_address_id  ua_address.address_id%TYPE;
        ex_null_value EXCEPTION;
        ex_account_not_found EXCEPTION;
--
    BEGIN
    -- Input parameter checks:
        IF p_account_id IS NULL THEN
            l_error := 'p_account_ID';
            RAISE ex_null_value;
        END IF;
    
    -- Check if account exists:
        SELECT
            COUNT(*)
        INTO l_account_exists
        FROM
            ua_account
        WHERE
            account_id = p_account_id;

        IF l_account_exists = 0 THEN
            RAISE ex_account_not_found;
        END IF;
    
    -- Getting the next sequence id value for the output paramater "p_address_id":
        p_address_id := address_seq.nextval;
        INSERT INTO ua_address (
            address_id,
            address_first_name,
            address_last_name,
            address_line_1,
            address_line_2,
            address_city,
            address_state_province,
            address_postal_code,
            address_country,
            address_phone,
            account_id
        ) VALUES (
            p_address_id,
            p_first_name,
            p_last_name,
            p_line_1,
            p_line_2,
            p_city,
            p_state_province,
            p_postal_code,
            p_country,
            p_phone,
            p_account_id
        );

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter: '
                                 || l_error
                                 || ' in ADD_ADDRESS_PP.  No ADDRESS added.');
            ROLLBACK;
        WHEN ex_account_not_found THEN
            dbms_output.put_line('Account: '
                                 || p_account_id
                                 || ' was not found!');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END add_address_pp;

    PROCEDURE create_collection_pp (
        p_collection_id  OUT  INTEGER,            -- an output parameter.  Value generated by the procedure.
        p_name           IN   VARCHAR,             -- must not be NULL.  Must be UNIQUE
        p_description    IN   CLOB,
        p_create_date    IN   DATE
    ) IS
        test_exst  NUMBER(1);
        id_return  ua_collection.collection_id%TYPE;
        no_data_found EXCEPTION;
        name_exsists EXCEPTION;
    BEGIN
  -- no null values 
        IF p_name IS NULL THEN
            RAISE no_data_found;
        ELSIF p_description IS NULL THEN
            RAISE no_data_found;
        ELSIF p_create_date IS NULL THEN
            RAISE no_data_found;
        END IF;
-- Not same name

        SELECT
            COUNT(*)
        INTO test_exst
        FROM
            ua_collection
        WHERE
            ua_collection.collection_name = p_name;

--not same name if

        IF test_exst != 0 THEN
            RAISE name_exsists;
        END IF;
        p_collection_id := collection_seq.nextval;

--insert
        INSERT INTO ua_collection (
            collection_id,
            collection_name,
            collection_description,
            collection_create_date
        ) VALUES (
            p_collection_id,
            p_name,
            p_description,
            p_create_date
        );

        COMMIT;
 -- ADD ID FOR the new colletion  
        SELECT
            collection_id
        INTO id_return
        FROM
            ua_collection
        WHERE
            collection_name = p_name;

        dbms_output.put_line('Colletion have been added whit the following id' || id_return); 

--Exception not wokring?
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Missing mandatory value for parameter'
                                 || 'All data filed have too be filed'
                                 || 'no data added');
            ROLLBACK;
        WHEN name_exsists THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || 'COLLATION NAME IS ALLREADY IN USE'
                                 || 'no data added. Please pick a diffrent name then:'
                                 || p_name);
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END create_collection_pp;

    PROCEDURE add_art_collection_pp (
        p_collection_id  IN  INTEGER,             -- must not be NULL.
        p_artwork_id     IN  INTEGER              -- must not be NULL.
    ) IS

        l_error  VARCHAR(20);
        l_exst   NUMBER(1);
        ex_null_value EXCEPTION;
        ex_collection_not_found EXCEPTION;
        ex_artwork_not_found EXCEPTION;
    BEGIN
        IF p_collection_id IS NULL THEN
            l_error := 'p_collection_id';
            RAISE ex_null_value;
        ELSIF p_artwork_id IS NULL THEN
            l_error := 'p_artwork_id';
            RAISE ex_null_value;
        END IF;

        SELECT
            COUNT(*)
        INTO l_exst
        FROM
            ua_collection
        WHERE
            collection_id = p_collection_id;

        IF l_exst != 1 THEN
            l_error := p_collection_id;
            RAISE ex_collection_not_found;
        END IF;
        l_exst := 0;
        SELECT
            COUNT(*)
        INTO l_exst
        FROM
            ua_artwork
        WHERE
            artwork_id = p_artwork_id;

        IF l_exst != 1 THEN
            l_error := p_artwork_id;
            RAISE ex_artwork_not_found;
        END IF;
        INSERT INTO ua_art_collection VALUES (
            p_collection_id,
            p_artwork_id
        );

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in ADD_ART_COLLECTION_PP.');
            ROLLBACK;
        WHEN ex_collection_not_found THEN
            dbms_output.put_line('Collection '
                                 || l_error
                                 || ' was not found.');
            ROLLBACK;
        WHEN ex_artwork_not_found THEN
            dbms_output.put_line('Artwork '
                                 || l_error
                                 || ' was not found.');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END add_art_collection_pp;

    PROCEDURE remove_art_collection_pp (
        p_collection_id  IN  INTEGER,             -- must not be NULL.
        p_artwork_id     IN  INTEGER              -- must not be NULL.
    ) IS

        p_collection_id_test             NUMBER(1);
        p_artwork_id_test                NUMBER(1);
        p_artwork_id_in_collection_test  NUMBER(1);
        no_data_found EXCEPTION;
        colletcion_not_found EXCEPTION;
        artwork_not_found EXCEPTION;
        artwork_not_found_in_collection EXCEPTION;
    BEGIN
        IF p_collection_id IS NULL THEN
            RAISE no_data_found;
        ELSIF p_artwork_id IS NULL THEN
            RAISE no_data_found;
        END IF;

        SELECT
            COUNT(*)
        INTO p_collection_id_test
        FROM
            ua_collection
        WHERE
            p_collection_id = collection_id;

        SELECT
            COUNT(*)
        INTO p_artwork_id_test
        FROM
            ua_artwork
        WHERE
            p_artwork_id = artwork_id;

        SELECT
            COUNT(*)
        INTO p_artwork_id_in_collection_test
        FROM
            ua_art_collection
        WHERE
                p_artwork_id = artwork_id
            AND p_collection_id = collection_id;

        IF p_artwork_id_test = 0 THEN
            RAISE artwork_not_found;
        END IF;
        IF p_collection_id_test = 0 THEN
            RAISE colletcion_not_found;
        END IF;
        IF p_artwork_id_in_collection_test = 0 THEN
            RAISE artwork_not_found_in_collection;
        END IF;
        DELETE FROM ua_art_collection
        WHERE
                p_collection_id = ua_art_collection.collection_id
            AND ua_art_collection.artwork_id = p_artwork_id;
    
    
        -- DELETE

        dbms_output.put_line('ARTWORK Whit the follwing id '
                             || p_artwork_id
                             || ' is removed from '
                             || p_collection_id);
    EXCEPTION
        WHEN no_data_found THEN
            dbms_output.put_line('Missing mandatory value for parameter'
                                 || 'All data filed have too be filed '
                                 || 'no data Removed ');
            ROLLBACK;
        WHEN colletcion_not_found THEN
            dbms_output.put_line('Collection dose not exsist' || 'no data Removed ');
            ROLLBACK;
        WHEN artwork_not_found THEN
            dbms_output.put_line('Artwork dose not exsist' || 'no data Removed ');
            ROLLBACK;
        WHEN artwork_not_found_in_collection THEN
            dbms_output.put_line('Artwork dose not exsist in collection' || 'no data Removed ');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END remove_art_collection_pp;

    PROCEDURE add_interest_pp (
        p_artwork_id  IN  INTEGER,             -- must not be NULL.
        p_account_id  IN  INTEGER,             -- must not be NULL.
        p_name        IN  VARCHAR,
        p_email       IN  VARCHAR
    ) IS

        l_artwork_exists   NUMBER(1);
        l_account_exists   NUMBER(1);
        l_interest_exists  NUMBER(1);
        l_error            VARCHAR(30);
        ex_null_value EXCEPTION;
        ex_artwork_not_found EXCEPTION;
        ex_account_not_found EXCEPTION;
        ex_interest_not_unique EXCEPTION; -- To handle exceptions with not unique primary key.
    BEGIN
    -- Checking input parameters
        IF p_artwork_id IS NULL THEN
            l_error := 'p_artwork_id';
            RAISE ex_null_value;
        ELSIF p_account_id IS NULL THEN
            l_error := 'p_account_id';
            RAISE ex_null_value;
        END IF;
    -- Checking if artwork and account exists in database.

        SELECT
            COUNT(*)
        INTO l_artwork_exists
        FROM
            ua_artwork
        WHERE
            artwork_id = p_artwork_id;

        SELECT
            COUNT(*)
        INTO l_account_exists
        FROM
            ua_account
        WHERE
            account_id = p_account_id;
    
    -- Checking if this interest allready exists in database (extra check- not a part of assignment 2). 

        SELECT
            COUNT(*)
        INTO l_interest_exists
        FROM
            ua_interest
        WHERE
                artwork_id = p_artwork_id
            AND account_id = p_account_id;

        IF l_artwork_exists = 0 THEN
            l_error := 'p_artwork_id';
            RAISE ex_artwork_not_found;
        ELSIF l_account_exists = 0 THEN
            l_error := 'p_account';
            RAISE ex_account_not_found;
        ELSIF l_interest_exists != 0 THEN
            l_error := 'p_artwork_id/p_account_id';
            RAISE ex_interest_not_unique;
        END IF;

        INSERT INTO ua_interest (
            interest_name,
            interest_email,
            artwork_id,
            account_id
        ) VALUES (
            p_name,
            p_email,
            p_artwork_id,
            p_account_id
        );

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter: '
                                 || l_error
                                 || ' in ADD_INTEREST_PP.  No interest added.');
            ROLLBACK;
        WHEN ex_artwork_not_found THEN
            dbms_output.put_line('Artwork: '
                                 || p_artwork_id
                                 || ' was not found!');
            ROLLBACK;
        WHEN ex_account_not_found THEN
            dbms_output.put_line('Artwork: '
                                 || p_account_id
                                 || ' was not found!');
            ROLLBACK;
        WHEN ex_interest_not_unique THEN
            dbms_output.put_line('Account: '
                                 || p_account_id
                                 || ' is allready registered as interested in Artwork: '
                                 || p_artwork_id);
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END add_interest_pp;

    PROCEDURE add_to_cart_pp (
        p_artwork_id  IN  INTEGER,     --NOT NULL
        p_account_id  IN  INTEGER      --NOT NULL
    ) IS
     --temp varibels

        quantity        INTEGER := 1;      --NOT NULL
        err_stg         VARCHAR(20);
        quantity_check  NUMBER(4);
        new_quantity    NUMBER(4);
        status          VARCHAR(20);
        l_rows          NUMBER(1);
    --Exseptions
        ex_null_value EXCEPTION;
        not_for_sale EXCEPTION;
        no_match_artwork EXCEPTION;
        no_match_account EXCEPTION;
    BEGIN
        --No null values
        IF p_artwork_id IS NULL THEN
            err_stg := 'ARTWORK ID';
            RAISE ex_null_value;
        ELSIF p_account_id IS NULL THEN
            err_stg := 'ACCOUNT ID';
            RAISE ex_null_value;
    
    --ARTWORK EXSIST
            l_rows := 0;
            SELECT
                COUNT(*)
            INTO l_rows
            FROM
                ua_artwork
            WHERE
                artwork_id = p_artwork_id;

            IF l_rows = 0 THEN
                err_stg := p_artwork_id;
                RAISE no_match_artwork;
            END IF;
            l_rows := 0;
    --ACCOUNT EXSIST
            SELECT
                COUNT(*)
            INTO l_rows
            FROM
                ua_account
            WHERE
                account_id = p_account_id;

            IF l_rows = 0 THEN
                err_stg := p_account_id;
                RAISE no_match_account;
            END IF;

    -- Not quantity in stock
        END IF;

        SELECT
            artwork_quantity_on_hand
        INTO quantity_check
        FROM
            ua_artwork
        WHERE
            p_artwork_id = artwork_id;

    --for sale check

        IF quantity_check <= 0 THEN
            RAISE not_for_sale;
            SELECT
                artwork_status
            INTO status
            FROM
                ua_artwork
            WHERE
                p_artwork_id = artwork_id;

        ELSIF status != 'For sale' THEN
            RAISE not_for_sale;
        END IF;
 --Insert

        INSERT INTO ua_cart_item (
            artwork_id,
            account_id,
            quantity
        ) VALUES (
            p_artwork_id,
            p_account_id,
            quantity
        );
-- Reduce in stock number

        SELECT
            artwork_quantity_on_hand
        INTO new_quantity
        FROM
            ua_artwork
        WHERE
            p_artwork_id = artwork_id;

        new_quantity := new_quantity - quantity_check;
        UPDATE ua_artwork
        SET
            artwork_quantity_on_hand = new_quantity
        WHERE
            p_artwork_id = artwork_id;

        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter||err_stg||in ADD_TO_CART_PP. No artwork added to cart');
            ROLLBACK;
        WHEN not_for_sale THEN
            dbms_output.put_line('Work of art ||p_account_id|| is not available. No artwork added to cart.');
            ROLLBACK;
        WHEN no_match_artwork THEN
            dbms_output.put_line('Work of art ||l_error|| not found.');
            ROLLBACK;
        WHEN no_match_account THEN
            dbms_output.put_line('ACCOUNT ||l_error|| not found.');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END add_to_cart_pp;

    PROCEDURE remove_from_cart_pp (
        p_artwork_id  IN  INTEGER,     --NOT NULL
        p_account_id  IN  INTEGER      --NOT NULL
    ) IS

        err_stg        VARCHAR(20);
        cart_quantity  NUMBER(4);
        new_quantity   NUMBER(4);
        status_check   VARCHAR(30);
        test_exst      NUMBER(1);
        ex_null_value EXCEPTION;
        cart_combination_not_exsit EXCEPTION;
    BEGIN
-- null check
        IF p_artwork_id IS NULL THEN
            err_stg := 'ARTWORK ID';
            RAISE ex_null_value;
        ELSIF p_account_id IS NULL THEN
            err_stg := 'ACCOUNT ID';
            RAISE ex_null_value;
        END IF;
--cart exsists

        SELECT
            COUNT(*)
        INTO test_exst
        FROM
            ua_cart_item
        WHERE
                account_id = p_account_id
            AND artwork_id = p_artwork_id;

        IF test_exst = 0 THEN
            RAISE cart_combination_not_exsit;
        END IF;

-- reset amount
        SELECT
            quantity
        INTO cart_quantity
        FROM
            ua_cart_item
        WHERE
                account_id = p_account_id
            AND artwork_id = p_artwork_id;

        SELECT
            artwork_quantity_on_hand
        INTO new_quantity
        FROM
            ua_artwork
        WHERE
            p_artwork_id = artwork_id;

        new_quantity := new_quantity + cart_quantity;
        UPDATE ua_artwork
        SET
            artwork_quantity_on_hand = new_quantity
        WHERE
            p_artwork_id = artwork_id;
-- remove statment

        DELETE FROM ua_cart_item
        WHERE
                account_id = p_account_id
            AND artwork_id = p_artwork_id;

        COMMIT;
--status check
        SELECT
            artwork_status
        INTO status_check
        FROM
            ua_artwork
        WHERE
            p_artwork_id = artwork_id;

        IF status_check != 'Sold out' THEN
            UPDATE ua_artwork
            SET
                artwork_status = 'For sale'
            WHERE
                p_artwork_id = artwork_id;

        END IF;

    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter||err_stg||in ADD_TO_CART_PP. No artwork added to cart');
            ROLLBACK;
        WHEN cart_combination_not_exsit THEN
            dbms_output.put_line('The combination off item and user dose not exsist');
            ROLLBACK;
    END remove_from_cart_pp;

    PROCEDURE view_cart_pp (
        p_account_id IN INTEGER      --NOT NULL
    ) IS
    BEGIN
        NULL;
    END view_cart_pp;

    PROCEDURE checkout_pp (
        p_account_id            IN   INTEGER,         --NOT NULL
        p_special_instructions  IN   VARCHAR,
        p_billing_type          IN   VARCHAR,
        p_payment_status        IN   VARCHAR,
        p_shipping_address      IN   INTEGER,
        p_billing_address       IN   INTEGER,         --NOT NULL
        p_order_id              OUT  INTEGER
    ) IS
    BEGIN
        NULL;
    END checkout_pp;

    FUNCTION calc_total_sales_pf (
        p_artist_id IN INTEGER
    ) RETURN INTEGER IS
        l_total_sales  NUMBER;
        l_error        VARCHAR(20);
        ex_null_value EXCEPTION;
    BEGIN
        IF p_artist_id IS NULL THEN
            l_error := 'p_artist_id';
            RAISE ex_null_value;
        END IF;
        SELECT
            SUM(order_detail_price)
        INTO l_total_sales
        FROM
                 ua_order_detail left
            JOIN ua_artwork ON ua_order_detail.artwork_id = ua_artwork.artwork_id
        WHERE
            ua_artwork.artist_id = p_artist_id;

        IF l_total_sales IS NULL THEN
            RETURN 0;
        END IF;
        RETURN l_total_sales;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in CALC_TOTAL_SALES_PP.');
            ROLLBACK;
            RETURN NULL;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
            RETURN NULL;
    END calc_total_sales_pf;

    FUNCTION calc_total_sales_pf (
        p_artist_id   IN  INTEGER,
        p_start_date  IN  DATE,
        p_end_date    IN  DATE
    ) RETURN INTEGER IS

        l_total_sales  NUMBER;
        l_error        VARCHAR(20);
        l_error_2      VARCHAR(20);
        ex_null_value EXCEPTION;
        ex_invalid_date EXCEPTION;
    BEGIN
        IF p_artist_id IS NULL THEN
            l_error := 'p_artist_id';
            RAISE ex_null_value;
        END IF;
        IF p_start_date >= p_end_date THEN
            l_error := p_start_date;
            l_error_2 := p_end_date;
            RAISE ex_invalid_date;
        END IF;

        SELECT
            SUM(order_detail_price)
        INTO l_total_sales
        FROM
                 ua_order_detail left
            JOIN ua_artwork ON ua_order_detail.artwork_id = ua_artwork.artwork_id
            LEFT JOIN ua_order_transaction ON ua_order_detail.order_id = ua_order_transaction.order_id
        WHERE
                ua_artwork.artist_id = p_artist_id
            AND ua_order_transaction.order_date BETWEEN p_start_date AND p_end_date;

        IF l_total_sales IS NULL THEN
            RETURN 0;
        END IF;
        RETURN l_total_sales;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in CALC_TOTAL_SALES_PP.');
            ROLLBACK;
            RETURN NULL;
        WHEN ex_invalid_date THEN
            dbms_output.put_line('The end date '
                                 || l_error_2
                                 || ' must be later than the start date '
                                 || l_error
                                 || '.');

            ROLLBACK;
            RETURN NULL;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
            RETURN NULL;
    END calc_total_sales_pf;

    PROCEDURE report_sales_pp (
        p_start_date  IN  DATE,
        p_end_date    IN  DATE
    ) IS

        CURSOR get_data_1 (
            x_start_date  IN DATE,
            x_end_date    IN DATE
        ) IS
        SELECT DISTINCT
            artist_id,
            artist_given_name,
            artist_surname
        FROM
            ua_artist
        WHERE
            artist_id IN (
                SELECT
                    artist_id
                FROM
                         ua_order_transaction
                    INNER JOIN ua_order_detail ON ua_order_transaction.order_id = ua_order_detail.order_id
                    INNER JOIN ua_artwork ON ua_order_detail.artwork_id = ua_artwork.artwork_id
                WHERE
                    order_date BETWEEN to_date(x_start_date, 'dd/mm/yyyy') AND to_date(x_end_date, 'dd/mm/yyyy')
            )
        ORDER BY
            artist_given_name,
            artist_surname;

        CURSOR get_data_2 IS
        SELECT DISTINCT
            artist_id,
            artist_given_name,
            artist_surname
        FROM
            ua_artist
        WHERE
            artist_id IN (
                SELECT
                    artist_id
                FROM
                         ua_order_transaction
                    INNER JOIN ua_order_detail ON ua_order_transaction.order_id = ua_order_detail.order_id
                    INNER JOIN ua_artwork ON ua_order_detail.artwork_id = ua_artwork.artwork_id
            )
        ORDER BY
            artist_given_name,
            artist_surname;

        l_start_date   DATE;
        l_end_date     DATE;
        l_total_sales  NUMBER;
        is_found_rec   BOOLEAN := false;
        ex_invalid_date EXCEPTION;
    BEGIN
    -- Error checks.
    -- Checking if dates is in chronological order:
        IF p_end_date <= p_start_date THEN
            RAISE ex_invalid_date;
        END IF;
        IF
            p_end_date IS NOT NULL AND p_start_date IS NOT NULL
        THEN
            l_start_date := p_start_date;
            l_end_date := p_end_date;
        ELSIF
            p_end_date IS NULL AND p_start_date IS NOT NULL
        THEN
            l_end_date := to_date(sysdate, 'dd/mm/yyyy');
            l_start_date := p_start_date;
        ELSIF
            p_end_date IS NOT NULL AND p_start_date IS NULL
        THEN
            l_end_date := p_end_date;
        -- Set l_start_date by selecting the date from the first sale:
            SELECT
                MIN(order_date)
            INTO l_start_date
            FROM
                ua_order_transaction;

        END IF;

    -- Loop trough data dependent on inputs:

        IF
            p_start_date IS NULL AND p_end_date IS NULL
        THEN
            FOR i IN get_data_2 LOOP
                is_found_rec := true;
                l_total_sales := calc_total_sales_pf(i.artist_id);
            -- Print info about all artists sales:
                dbms_output.put_line('Artist: '
                                     || i.artist_given_name
                                     || ' '
                                     || i.artist_surname
                                     || ' Total sales amount: '
                                     || to_char(l_total_sales));

            END LOOP;

            IF NOT is_found_rec THEN
                RAISE no_data_found;
            END IF;
            
    -- In all other cases:
        ELSE
            FOR i IN get_data_1(l_start_date, l_end_date) LOOP
                is_found_rec := true;
                l_total_sales := calc_total_sales_pf(i.artist_id, l_start_date, l_end_date);
            -- Print info about all artists sales within specified period:
                dbms_output.put_line('Artist: '
                                     || i.artist_given_name
                                     || ' '
                                     || i.artist_surname
                                     || ' Sales amount in period: '
                                     || to_char(l_total_sales));

            END LOOP;

            IF NOT is_found_rec THEN
                RAISE no_data_found;
            END IF;
        END IF;

    EXCEPTION
        WHEN ex_invalid_date THEN
            dbms_output.put_line('The end date '
                                 || p_end_date
                                 || ' must be later than the start date '
                                 || p_start_date);
            ROLLBACK;
        WHEN no_data_found THEN
            dbms_output.put_line('No data found in database');
            ROLLBACK;
        WHEN OTHERS THEN
            dbms_output.put_line('Something went wrong - '
                                 || sqlcode
                                 || ' : '
                                 || sqlerrm);
            ROLLBACK;
    END report_sales_pp;

END upriseart3b_pkg;
/