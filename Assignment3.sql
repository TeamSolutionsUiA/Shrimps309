-- package implementation
create or replace package upriseart3a_pkg 
IS
procedure CREATE_ARTIST_PP (
 p_artist_id        OUT INTEGER,        -- an output parameter
 p_tax_id           IN VARCHAR,         -- must not be NULL.  Must be UNIQUE.
 p_given_name       IN VARCHAR,
 p_surname          IN VARCHAR,
 p_display_name     IN VARCHAR,         -- If NULL, then use the concatenation ('||') of p_given_name and p_surname
 p_birth_year       IN INTEGER,         -- value must be between 1900 and 2050
 p_photo_url        IN VARCHAR,
 p_biosketch        IN CLOB,
 p_street_1         IN VARCHAR,         -- must not be NULL.
 p_street_2         IN VARCHAR,
 p_city             IN VARCHAR,         -- must not be NULL.
 p_state_province   IN VARCHAR,
 p_postal_code      IN VARCHAR,         -- must not be NULL.
 p_country          IN VARCHAR          -- must not be NULL.
);
procedure CREATE_ARTWORK_PP (
 p_artwork_id       OUT INTEGER,        -- an output parameter.  Value generated bythe procedure.
 p_title            IN VARCHAR,         -- must not be NULL
 p_price            IN NUMBER,
 p_size_height      IN DECIMAL,         -- must not be a negative number
 p_size_width       IN DECIMAL,         -- must not be a negative number
 p_size_depth       IN DECIMAL,         -- must not be a negative number
 p_size_category    IN VARCHAR,         -- must be one of {'Large', 'Medium', 'Oversized', 'Small'}
 p_creation_year    IN INTEGER,         -- must be between 2000 and the current year
 p_aquisition_date  IN DATE,            -- must not be NULL.  Must not be in the future.
 p_materials        IN VARCHAR,
 p_framed           IN VARCHAR,
 p_medium_name      IN VARCHAR,         -- must match a value found in the UA_MEDIUM table
 p_photo_url        IN VARCHAR,         -- must not be NULL
 p_quantity_on_hand IN INTEGER,
 p_status           IN VARCHAR,         -- must not be NULL.  Must be one of:  {'For sale', 'Sold out', 'Unavailable'}
 p_artist_id        IN INTEGER          -- must not be NULL.  Must match a value found in the UA_ARTIST table 
);
end upriseart3a_pkg;
/


-- body
create or replace package body upriseart3a_pkg 
IS
    procedure CREATE_ARTIST_PP (
     p_artist_id        OUT INTEGER,        -- an output parameter
     p_tax_id           IN VARCHAR,         -- must not be NULL.  Must be UNIQUE.
     p_given_name       IN VARCHAR,
     p_surname          IN VARCHAR,
     p_display_name     IN VARCHAR,         -- If NULL, then use the concatenation ('||') of p_given_name and p_surname
     p_birth_year       IN INTEGER,         -- value must be between 1900 and 2050
     p_photo_url        IN VARCHAR,
     p_biosketch        IN CLOB,
     p_street_1         IN VARCHAR,         -- must not be NULL.
     p_street_2         IN VARCHAR,
     p_city             IN VARCHAR,         -- must not be NULL.
     p_state_province   IN VARCHAR,
     p_postal_code      IN VARCHAR,         -- must not be NULL.
     p_country          IN VARCHAR          -- must not be NULL.
    )
    IS
        l_error varchar(20);
        l_display_name UA_ARTIST.artist_display_name%TYPE;
        l_exst number(1);
        ex_null_value EXCEPTION;
        ex_invalid_date EXCEPTION;
        ex_invalid_uk EXCEPTION;
    BEGIN
        l_display_name := p_display_name;
        IF p_tax_id IS NULL THEN
            l_error := 'p_tax_id';
            raise ex_null_value;
        ELSIF p_street_1 IS NULL THEN
            l_error := 'p_street_1';
            raise ex_null_value;
        ELSIF p_city IS NULL THEN
            l_error := 'p_city';
            raise ex_null_value;
        ELSIF p_postal_code IS NULL THEN
            l_error := 'p_postal_code';
            raise ex_null_value;
        ELSIF p_country IS NULL THEN
            l_error := 'p_postal_code';
            raise ex_null_value;
        ELSIF ( p_birth_year < 1900 OR p_birth_year > 2050 ) THEN
            l_error := p_birth_year;
            raise ex_invalid_date;
        ELSIF l_display_name IS NULL THEN
            l_display_name := p_given_name || p_surname;
            IF l_display_name IS NULL THEN
                l_error := 'p_display_name';
                raise ex_null_value;
            END IF;
        END IF;
    
        SELECT
            COUNT(*)
        INTO l_exst
        FROM
            ua_artist
        WHERE
            artist_tax_id = p_tax_id;
    
        IF l_exst != 0 THEN
            l_error := p_tax_id;
            raise ex_invalid_uk;
        END IF;
        p_artist_id := artist_seq.nextval;
        
        INSERT INTO ua_artist (
            artist_id,
            artist_tax_id,
            artist_given_name,
            artist_surname,
            artist_display_name,
            artist_birth_year,
            artist_photo_url,
            artist_biosketch,
            artist_street_1,
            artist_street_2,
            artist_city,
            artist_state_province,
            artist_postal_code,
            artist_country
        ) VALUES (
            p_artist_id,
            p_tax_id,
            p_given_name,
            p_surname,
            l_display_name,
            p_birth_year,
            p_photo_url,
            p_biosketch,
            p_street_1,
            p_street_2,
            p_city,
            p_state_province,
            p_postal_code,
            p_country
        );
    
        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter '
                                 || l_error
                                 || ' in CREATE_ARTIST_SP.  No artist added.');
        WHEN ex_invalid_date THEN
            dbms_output.put_line('Invalid value '
                                 || l_error
                                 || ' for birth year in CREATE_ARTIST_SP.');
        WHEN ex_invalid_uk THEN
            dbms_output.put_line('Tax ID '
                                 || l_error
                                 || ' is already used.');
    END CREATE_ARTIST_PP;
    
    procedure CREATE_ARTWORK_PP (
     p_artwork_id       OUT INTEGER,        -- an output parameter.  Value generated bythe procedure.
     p_title            IN VARCHAR,         -- must not be NULL
     p_price            IN NUMBER,
     p_size_height      IN DECIMAL,         -- must not be a negative number
     p_size_width       IN DECIMAL,         -- must not be a negative number
     p_size_depth       IN DECIMAL,         -- must not be a negative number
     p_size_category    IN VARCHAR,         -- must be one of {'Large', 'Medium', 'Oversized', 'Small'}
     p_creation_year    IN INTEGER,         -- must be between 2000 and the current year
     p_aquisition_date  IN DATE,            -- must not be NULL.  Must not be in the future.
     p_materials        IN VARCHAR,
     p_framed           IN VARCHAR,
     p_medium_name      IN VARCHAR,         -- must match a value found in the UA_MEDIUM table
     p_photo_url        IN VARCHAR,         -- must not be NULL
     p_quantity_on_hand IN INTEGER,
     p_status           IN VARCHAR,         -- must not be NULL.  Must be one of:  {'For sale', 'Sold out', 'Unavailable'}
     p_artist_id        IN INTEGER          -- must not be NULL.  Must match a value found in the UA_ARTIST table 
    )
    IS
        l_error          VARCHAR(200);
        l_rows          NUMBER(1);
        
        ex_null_value EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_null_value, -20001);
        ex_negative_num EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_negative_num, -20002);
        ex_invalid_size EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_invalid_size, -20003);
        ex_invalid_creation_year EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_invalid_creation_year, -20004);
        ex_date_not_in_past EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_date_not_in_past, -20005);
        
        ex_no_matching_medium EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_no_matching_medium, -20006);
        ex_no_matching_artist EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_no_matching_artist, -20007);
        ex_invalid_status EXCEPTION;
        PRAGMA EXCEPTION_INIT(ex_invalid_status, -20008);
        
        CHECK_CONSTRAINT_VIOLATED EXCEPTION;
          PRAGMA EXCEPTION_INIT(CHECK_CONSTRAINT_VIOLATED, -2290);
    BEGIN
        -- Exception handling:
        -- Ex1: Input parameter checks: not null
        IF p_title IS NULL THEN
            l_error := 'p_title';
            raise ex_null_value;
        ELSIF p_aquisition_date IS NULL THEN
            l_error := 'p_aquisition_date';
            raise ex_null_value;
        ELSIF p_photo_url IS NULL THEN
            l_error := 'p_photo_url';
            raise ex_null_value;
        ELSIF p_status IS NULL THEN
            l_error := 'p_status';
            raise ex_null_value;
        ELSIF p_artist_id IS NULL THEN
            l_error := 'p_artist_id';
            raise ex_null_value;
        END IF;
        
        -- Ex2: Artist check
        SELECT COUNT(*) INTO l_rows FROM ua_artist
        WHERE artist_id = p_artist_id;
        IF l_rows != 1 THEN
            l_error := p_artist_id;
            raise ex_no_matching_artist;
        END IF;
        
        -- Ex3: Medium
        SELECT COUNT(*) INTO l_rows FROM ua_medium
        WHERE medium_name = p_medium_name;
        IF l_rows != 1 THEN
            l_error := p_medium_name;
            raise ex_no_matching_medium;
        END IF;
        
        -- Ex4: current_date year >= creation year >= 2000
        IF (p_creation_year <= 2000 AND  p_creation_year <= EXTRACT(YEAR FROM CURRENT_DATE())) THEN
            raise ex_invalid_creation_year;
        END IF;
        
        -- Ex5: acquisition date is not in past
        IF (p_aquisition_date > CURRENT_DATE()) THEN
            raise ex_date_not_in_past;
        END IF;
        
        -- Ex6: negative numbers
        IF (p_size_height IS NOT NULL AND p_size_height < 0) 
            OR (p_size_width IS NOT NULL AND p_size_width < 0) 
            OR (p_size_depth IS NOT NULL AND p_size_depth < 0) THEN
            
            raise ex_negative_num;
        END IF;
        
        -- Ex7: size category validation
        IF p_size_category NOT IN ('Large', 'Medium', 'Oversized', 'Small') THEN
            raise ex_invalid_size;
        END IF;
        
        -- Ex8: artwork status validation
        IF p_status NOT IN ('For sale', 'Sold out', 'Unavailable') THEN
            raise ex_invalid_status;
        END IF;
        
        p_artwork_id := ARTWORK_SEQ.nextval;
        
        INSERT INTO ua_artwork (
            artwork_id,
            artwork_title,
            artwork_price,
            artwork_size_height,
            artwork_size_width,
            artwork_size_depth,
            artwork_size_category,
            artwork_creation_year,
            artwork_acquisition_date,
            artwork_materials,
            artwork_framed,
            medium_name,
            artwork_photo_url,
            artwork_quantity_on_hand,
            artwork_status,
            artist_id
        ) VALUES (
            p_artwork_id,
             p_title,
             p_price,
             p_size_height,
             p_size_width,
             p_size_depth,
             p_size_category,
             p_creation_year,
             p_aquisition_date,
             p_materials,
             p_framed,
             p_medium_name,
             p_photo_url,
             p_quantity_on_hand,
             p_status,
             p_artist_id
        );
        COMMIT;
    EXCEPTION
        WHEN ex_null_value THEN
            dbms_output.put_line('Missing mandatory value for parameter ' || l_error || ' in CREATE_ACCOUNT_SP. No account added.');
        WHEN ex_no_matching_artist THEN
            dbms_output.put_line('Invalid artist (' || l_error || ') in CREATE_ARTWORK_SP.'); 
        WHEN ex_no_matching_medium THEN
            dbms_output.put_line('Invalid medium (' || l_error || ') in CREATE_ARTWORK_SP.');
        WHEN ex_invalid_creation_year THEN
            dbms_output.put_line('Invalid creation year (' || p_creation_year || ') in CREATE_ARTWORK_SP.'); 
        WHEN ex_date_not_in_past THEN
            dbms_output.put_line('Invalid acquisition date (' || p_aquisition_date || ') in CREATE_ARTWORK_SP.'); 
        WHEN ex_negative_num THEN
            dbms_output.put_line('All size parameters must be 0 or greater (or null) in CREATE_ARTWORK_SP.');
        WHEN ex_invalid_size THEN
            dbms_output.put_line('Invalid artwork size category (' || p_size_category || ') in CREATE_ARTWORK_SP.'); 
        WHEN ex_invalid_status THEN
            dbms_output.put_line('Invalid artwork status (' || p_status || ') in CREATE_ARTWORK_SP.'); 
        
        WHEN CHECK_CONSTRAINT_VIOLATED THEN
            dbms_output.put_line('INSERT failed due to check constraint violation');
        WHEN OTHERS THEN                  
            dbms_output.put_line('Something else went wrong - ' || SQLCODE || ' : ' || SQLERRM);
    END CREATE_ARTWORK_PP;
end upriseart3a_pkg;
/